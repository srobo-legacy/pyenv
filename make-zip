#!/usr/bin/env python

import argparse
import os
import shutil
import subprocess
import sys
import tempfile

from zip_utils import add_pyenv_rev_file, create_zip, \
                      remove_gunk, remove_user_dir, \
                      strip_binaries, REPO_ROOT, PYENV_DIR

def copy_pyenv_to( target ):
    subprocess.check_call( "cp -r %s/* %s" % (PYENV_DIR, target), shell = True )

def copy_user_code( src, target_pyenv ):
    # Copy in the user's code
    target = os.path.join( target_pyenv, "user" )
    shutil.copytree( src, target )

parser = argparse.ArgumentParser(description='Pack a robot.zip from user code.')
parser.add_argument('usercode',
                    help='user code source directory, containing a robot.py')
parser.add_argument('output',
                    help='output zip file')
parser.add_argument('--no-strip',
                    dest='suppress_strip',
                    action='store_true',
                    help='suppress binary stripping behaviour')
parser.add_argument("--remove-gunk", "-r",
                    action="store_true",
                    help="Remove 'gunk' files from user code (e.g. editor backup files)")

args = parser.parse_args()

USER_CODE_DIR, OUTPUT_ZIP = args.usercode, args.output

if not os.path.isdir( USER_CODE_DIR ):
    print >>sys.stderr, "Error: Supplied user directory path is not a directory."
    exit(1)

# Temporary directory for constructing everything inside
tmpd = tempfile.mkdtemp( suffix="-pyenv" )

copy_pyenv_to( tmpd )

add_pyenv_rev_file( REPO_ROOT, tmpd )

if not args.remove_gunk:
    "Remove gunk before the user files are put in"
    remove_gunk( tmpd )
remove_user_dir( tmpd )

if not args.suppress_strip:
    strip_binaries( tmpd )

copy_user_code( USER_CODE_DIR, tmpd )

if args.remove_gunk:
    "Remove gunk from the user directory as well"
    remove_gunk( tmpd )

create_zip( tmpd, OUTPUT_ZIP )

shutil.rmtree( tmpd )
